Ansible practs
------------------------------ installations--------------------------------
Setup Ansible (installation Ubuntu)
Take 2 servers one is ansible master other one is ansible slave ( i am taking 2 ubuntu servers)
Launch servers.
ref:https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-ubuntu
sudo apt-get update -y
sudo apt install software-properties-common
sudo apt-add-repository --yes --update ppa:ansible/ansible
sudo apt install ansible

To check python version --- python3 --version
ansible --version (for ansible shows the version)
from above steps the ansible configuration is done.
Now we have to make ssh connection between the node and server.
vi /etc/hosts
private ip address server1.com server1
Private ip address node1.com node1
Do the same operations in both server and node.
After going to aws console check server and node actions click on reboot.
cd .ssh
ssh-keygen (it will generate keys)
before generate ssh-keygen go to
vi /etc/ssh/sshd_config
In this file
Permit root login will be yes &
PasswordAuthentication yes
systemctl restart sshd (its used for the restart a ssh)
Now in the position of .ssh type ssh-keygen
ls now u wil see the public key and private key
vi public key (copy that one)
Login into node server;

cd .ssh
vi authorized_keys
To go for end of ssh file type shift +a
Paste the public key of ansible server in node..
Save the file.
In node go
vi /etc/ssh/sshd_config
In this file
Permit root login will be yes &
PasswordAuthentication yes
systemctl restart sshd (its used for the restart a ssh)
After ssh restart on node go to main server console.
and sudo su
ssh give here node server ip address. 

 type yes
Now it will login on node server.
-------------------------------------------------------------for this succesfully we made ssh connection between server to node-------------
Master server inventory containn all the ip address of nodes.
cd /etc/ansible/
vi hosts
[webserver]
172.31.38.220 (its is a private ip address of node like how many nodes present give step by step)

ansible -m ping all
Sample will be like this:

172.31.38.220 | SUCCESS => {
"ansible_facts": {
"discovered_interpreter_python": "/usr/libexec/platform-python"
},
"changed": false,
"ping": "pong"
}


                                               Ansible ON RHEL & CENTOS

sudo su && cd
pwd(now u r in root directory to install softwares)
yum install wget (its for download web packages in linux)
yum info wget (info command used to know complete information about that package)
cat /etc/redhat-release (to find version of redhat)
rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm (its for Upgrade package we
downloaded that epel repo)
yum install epel-release -y --- its for downloading the epel package in our linux machine
yum install python (ansible develop by python so we need python if python not available means we will go with python 3)
If python not install means it will give suggestions like this below
There are following alternatives for "python": python2, python36, python38
Now we go with python3.
yum install git python3 python3-pip ansible openssl -y --- using this command we at a time installing the python and ansible)
Now it will download all the packeges.
To check python version --- python3 --version
ansible --version (for ansible shows the version)

vi /etc/hosts
private ip address server1.com server1
Private ip address node1.com node1
Do the same operations in both server and node.
After going to aws console check server and node actions click on reboot.
cd .ssh
ssh-keygen (it will generate keys)
before generate ssh-keygen go to
vi /etc/ssh/sshd_config
In this file
Permit root login will be yes &
PasswordAuthentication yes
systemctl restart sshd (its used for the restart a ssh)
Now in the position of .ssh type ssh-keygen
ls now u wil see the public key and private key
vi public key (copy that one)
Login into node server;

cd .ssh
vi authorized_keys
To go for end of ssh file type shift +a
Paste the public key of ansible server in node..
Save the file.
In node go
vi /etc/ssh/sshd_config
In this file
Permit root login will be yes &
PasswordAuthentication yes
systemctl restart sshd (its used for the restart a ssh)
After ssh restart on node go to main server console.
and sudo su
ssh give here node server ip address. 

 type yes
Now it will login on node server.
-------------------------------------------------------------for this succesfully we made ssh connection between server to node-------------
Master server inventory contains all the ip address of nodes.
cd /etc/ansible/
vi hosts
[web server]
172.31.38.220 (its is a private ip address of node like how many nodes present give step by step)

ansible -m ping all
Sample will be like this:

172.31.38.220 | SUCCESS => {
"ansible_facts": {
"discovered_interpreter_python": "/usr/libexec/platform-python"
},
"changed": false,
"ping": "pong"
}


----------------------------from above we are successfully learned ansible installation on ubuntu && rhel-----------------------




------------------------------------------------ installation && configure done------------------------------------------------------------------------------------

launch 3 instances
login into one server.
sudo apt-get update 
sudo apt-get install software-properties-common

sudo apt-add-repository ppa:ansible/ansible
sudo apt-get update 
sudo apt-get install -y ansible

ansible --version
cd /etc/ansible/ 
ls
ansible.cfg hosts roles

sudo vim hosts
take the all private ip's and paste here.


to execute one command in all servers at a time
ansible all -a 'date'

note : if u see here warnings (to remove warnings)
if u want to remove warnings
vi /etc/anisble/ansible.cfg

search for deprecation_warnings:
make it like
deprecation_warnings = False

save it
ansible all -a 'ls -la'

hosts is an inventory file it is present in /etc/ansible folder

host contain list of hostnames(private ip address)
ansible does not require any client software install in managed on nodes

its required password less authentication to comminicate between controller to nodes

** ansible mostly used modules
* command: to exexute linux commands on all nodes will use shell
* ping:used to ping remote servers pingged or not
* file: creating & deleting files & directoroes on managed on nodes
* copy: used to copy files and directories to managed nodes
* fetch : copying files from managed nodes to controller
* user : used for creating users assign home directories default shell script etc...
* apt: related to package management on ubuntu machines
* yum : this will use for packamange management : centos ,fedora etc machies
* service: used for starting stopping services on all manages nodes
* replace: replacing a specific strings in a file
* uri: used for remote url from managed nodes is reachable or not
* setup: used for capture hardware and software configurations of manager nodes
* stat: capture info about files and folders all manager nodes
* debug : used for display output of any module 
* include: used for calling child playbooks from parent playbook
* template : used for copying dynamic configurations files from controller to managed node similar to copy module but we can use group variables that define al 
managed nodes
* mount: mounting/unmounting devices on managed nodes
* group: used for creating groups on remote servers
* git: used to perform git version controlling all the manager nodes 
* mail: used to sending emails from manage node (generally used for sending error notofication as email messages)
* docker_container: this module used for exec docker container commands all manager nodes
* docker_images: used for exec docker commands related ti images
* docker_login: used for logged into docker hub to manager nodes
* ec2: used launching ec2 instances on aws

ansible perform remote configuration in 3 diff ways 
adhoc commands (invidual commands)
playbooks
roles

ansible all/groupname/ipaddress -i pathofinventoryfile -m command -a 'free -m' 
i is inventory file(path is /etc/ansible/hosts)
m module name

creating my own inventory file
myinventory
paste only 2 or any

now run ansible commands
ansible all -i myinventory  -m command -a 'free -m' 

ansible 172.189.12.3 -i myinventory  -m command -a 'free -m' 


if u don't give ur own inventory it will take default inventory file(/etc/ansible/hosts)


while working on module of shell 
ansible all -i myinventory  -m command -a 'free -m' 
to 
ansible all -a 'df -h'

ansible all -m shell -a 'sh get-docker.sh'

ansible all -m copy -a 'src=/etc/passwd dest=/tmp'

from controller to all manger nodes under tmp it will paste the data.

create multiple directories on the controller one with other
mkdir -p d1/d2/d3/d4


to copy this entire folder strcture
ansible all -m copy 'src=d1 dest=/tmp'

by using copy module we can change the permissions also
ansible all -m copy -a 'src=file2 dest=/tmp owner=root group=root mode=765'

*** if u want execute as sudo in asnbile will use
ansible all -m copy -a 'src=file2 dest=/tmp owner=root group=root mode=765' -b

* by using copy module we can replace the data also
ansible all -m copy -a 'content="welcome to raj\n" dest=/tmp/file2' -b

-b means becomes


using copy module we can manage permissions and we can replace data too


* files
ansible all -m file -a 'name=/tmp/newfile state=touch'
ansible all -m file -a 'name=/tmp/newfolder state=directory'

** to delete a file or folder
ansible all -m file -a 'name=/tmp/newfolder state=absent'

ansible all -m file -a 'name=/tmp/newfolder state=directory owner=root group=root mode=777' -b

files we can create files and folders and we can remove them also and we can change the owener permissions too

** ansible is an idempodent(if existing will be there it wont change on execustion change=false)

apt

ansible all -m apt -a 'name=git state=present' -b

note:
state=present used for installations
state=absent used for uninstalltion
state=latest used for upgradation to latest versions

ansible all -m apt -a 'name=tomcat8 state=present' -b

* update_cache means first it will update the all nodes later it will instal the package
ansible all -m apt -a 'name=apache2 state=present update_cache=yes' -b

* when you are uninstalling packages then u need to delete or remove those related packages too
ansible all -m apt -a 'name=apache2 state=absent purge=yes' -b

purge= yes will be given for removing all configuration files once application will be deleted ansible command uninsall tomcat and also remove configuration files

service

ansible all -m service -a 'name=tomcat8 state=restarted' -b

started
stopped
restarted


git 

ansible all -m git -a 'repo=https://github.com/selenium-saikrishna/maven.git dest=/home/ubuntu/mygit' 


replace

ansible all -m replace -a 'path=/etc/tomcat8/server.xml regexp=8080 replace=9090' -b
ansible all -m service -a 'name=tomcat8 state=restarted' -b


user

ansible all -m user -a 'name=singam password=singam@123' -b
ansible all -m user -a 'name=singam password=singam@123 uid=1234 comment="a normal user" home=/home/ubuntu/anu  shell=/bin/bash' -b


ansible all -m uri -a 'url=http://google.com status=200' 

                              Playbooks
Playbooks are created using yaml files

mkdir playbooks
cd playbooks
vi playbook.yml

---
- name: install firewalld on all manager nodes
  hosts: all
  tasks: 
   - name: install firewalld
     apt:
      name: firewalld
      state: present
      update_cache: yes 


ansible-playbook playbook.yml --syntax-check -b

---
- name: install git
  hosts: all
  tasks: 
   - name: install git
     apt:
      name: git
      state: present
   - name: clone a remote git repo
     git:
       repo:https://github.com/selenium-saikrishna/maven.git dest=/home/ubuntu/mygit
       dest: /tmp/mygit 

UseCase
1 Install apache2 on one managed host
2 Edit the content of index.html file
3 Restart apache2
4 Check whether url is responding or not

vim playbook3.yml
Go into insert mode by pressing 'i'

---
- name: Configuring apache2
  hosts: 192.168.60.14
  become: yes
  tasks:
   - name: Installing apache2
     apt:
      name: apache2
      state: present
   - name: Edit index.html file
     copy:
      content: "Hi This is the home page of IntelliQ"
      dest: /var/www/html/index.html
   - name: Restart apache2
     service:
      name: apache2
      state: restarted
   - name: Checking url response
     uri:
      url: http://192.168.60.14
      status: 200


------------------------ variables----------
Variables:
Its used to store the information.

---
- hosts: webserver
  remote_user: root
  become: yes
  vars:
   pkg: httpd
  tasks:
   - name: install httpd
     yum: name={{pkg}} state=installed
   - name: creates index.html file
     copy: src=index.html dest=/var/www/html
   - name: restart httpd
     service: name={{pkg}} state=started
---
- hosts: webserver
  remote_user: root
  become: yes
  tasks:
   - name: install httpd
     yum: name={{a}} state={{b}} update_cache={{c}}
     or
     name: "{{a}}"
     state: "{{b}}"
ansible-playbook plyabook.yml --extra-vars "a=tree b=absent c=no" -b


by using variables of global variables we make playbook dynamic -b

---
- hosts: webserver
  remote_user: root
  become: yes
  tasks:
   - name: creating users
     user: 
      name: "{{a}}"
      state: "{{b}}"
      home: "{{c}}
      uid: "{{d}}
   - name: copying files
     copy;
      src: "{{e}}"
      dest: "{{f}}"
 
ansible-playbook plyabook.yml --extra-vars "a=tree b=absent c=no d" -b 


with in a variable

---
- hosts: webserver
  remote_user: root
  become: yes
  vars:
   - a: tomcat8
   - b: present
   - c: no
  tasks:
   - name: Install
     apt:
       name: "{{a}}"
       state: "{{b}}"
       update_cache: "{{c}}"
       
      
ansible-playbook plyabook.yml --extra-vars "a=tree b=absent c=no d" -b 

vi hosts
[webserver]
172.78.78
[db]
156.45.656
[server:children]
webserver
db

group vars refer once.


Ansible files:
Previously we store variables inside a playbook but now we are storing variables in a file.
 
Create fileabc.yml file paste below code on this.
pkg: httpd
After create files.yml (paste below code)
 
---
- hosts: webserver
  remote_user: root
  become: yes
  vars_files:
   - fileabc.yml
  tasks:
   - name: install httpd
     yum: name={{pkg}} state=installed
   - name: creates index.html file
     copy: src=index.html dest=/var/www/html
   - name: restart httpd
     service: name={{pkg}} state=started 
 
Checking syntax:
 ansible-playbook files.yml --syntax
 ansible-playbook files.yml


vi webserver.yml
---
a: default-jdk
b: present
---
- hosts: webserver
  remote_user: root
  become: yes
  vars_files:
   - fileabc.yml
  tasks:
   - name: install httpd
     apt: name={{a}} state={{b}}
   


loops

Loops playbook ansible
For suppose i want install multi packages in nodes or at a time we install 100 packages at a time.
vi loop.yml 
---
- hosts: webserver
  remote_user: root
  become: yes
  tasks:
   - name: installing multiple packages
     yum: name={{item}} state=installed
     with_items:
        - httpd
        - curl
        - wget
        
2.
---
- hosts: webserver
  remote_user: root
  become: yes
  tasks:
   - name: installing multiple packages
     yum: 
     name: "{{item.a}}" 
     state: "{{item.b}}"
     with_items:
        - {a: httpd,b: present}
        - {a: curl,b: present}
        - wget
3. creating multiple users
- hosts: webserver
  remote_user: root
  become: yes
  tasks:
   - name: creating users
     user: 
       name: "{{item.a}}" 
       password: "{{item.b}}"
       home: "{{item.c}}"
     with_items:
        - {a: raj,b: call2ask,c: /home/raj}
   - name: coping files
     copy:
      src: "{{item.a}}"
      dest: "{{item.b}}"
     with_items:
        - {a: /etc/passwd,b: /home/smaranj} 
        
ansible-playbook loop.yml --syntax
Above if we observe withitems place we need to give whatever the packages we need to install.

conditional operator

---
 - name: simple play to install httpd
   hosts: all
   become: yes 
   tasks:
   - name: installing httpd using yum 
     yum: 
        name: httpd
        state: absent
     when: ansible_distribution == "RedHat"
   - name: installing httpd using apt 
     yum: 
        name: git
        state: latest
     when: ansible_distribution == "RedHat"
2
---
 - name: imple play to install httpd
   hosts: all
#  gather_facts: false
   become: yes 
   tasks:
     - name: Update Existing Packages
       yum: name=httpd state=latest
       when: (ansible_distribution == "CentOS") or
            (ansible_distribution == "RedHat")  

3.
---
- hosts: all
  gather_facts: False
  tasks:
    - name: Check Dist Version
      shell: cat /etc/os-release
      register: response

    - debug: msg="{{ response.stdout }}"


file module:

---
 - name: installing packages
   hosts: all
   become: yes
   tasks:
    - name: installing git packages  
      file:
       path: /home/ansadmin/demofile
       state: touch
    - name: creating a directory
      file:
       path: /home/ansadmin/directory
       state: directory


Register module we used to capture the output


Debug is used to display the output
 Vi register.yml
---
- hosts: webserver
  remote_user: root
  become: yes
  tasks:
   - name: install httpd
     yum: name=httpd state=installed
   - name: creates index.html file
     copy: src=index.html dest=/var/www/html
   - name: restart httpd
     service: name=httpd state=started
     register: output
   - debug:
       msg: "{{output}}"

2. check the directory present or not if exist create a file

---
- name: check the directory present or not if exist create a file
  hosts: webserver
  tasks:
   - name: check dir
     stat:
      path: /var
      register: results
   - name: display output of the above stat modules
     debug
      var: results
   - name: create a file
     file:
      name: /var/file1
      state: touch
     when:  
      results.stat.exists == true
---

in result will see that exist
      
ansible-playbook register.yml --syntax
ansible-playbook register.yml


notify
**notify name and handler name should be same otherwise it will through an error.

Httpd install on ansible playbook.
---
 - name: installing packages
   hosts: all
   become: yes
   tasks:
    - name: installing http packages
      yum:
       name: httpd
       state: latest
      notify: starting httpd package
    handlers:   
    - name: starting httpd package
      service:
       name: httpd
       state: started

Note: notify message and 
Handler:
 Name: name of handler 


rescue
---
 - name: error handling
   hosts: all
   become: yes
   tasks:
   - block:
      - name: installing http packages
        yum:
         name: httpd
         state: latest
     rescue;
      - name: install tomcat8
        apt:
         name: tomcat8
         state: present
     always:
      - name: check url responce
        uri:
         url: "{{item}}"
         status: 200
        with_items:
         - http://privateip:8080
         - http://privateip:8080         
         
 
 tagging:
 
 Tags: (when u want execute particular task only)
---
- name: this playbook install httpd
  hosts: all
  become: true
  tasks:
  - name: install package
    yum:
      name: httpd
      state: installed
    when: ansible_os_family == "RedHat"
    tags: install_apache
  - name: start apache
    service:
      name: httpd
      state: started
    when: ansible_os_family == "RedHat"
    tags: start_apache

ansible-playbook.yml  file.yml --tags “install_apache” 


2.
Tags:
In play book if u want perform a particular task for ex i have 3 task i want to run 2 task that time i just give 2 tagname is enough to run that task.
vi tags.yml
---
- hosts: webserver
  remote_user: root
  become: yes
  tasks:
   - name: install httpd
     yum: name=httpd state=installed
     tags:
      - install
   - name: creates index.html file
     copy: src=index.html dest=/var/www/html
     tags:
      - configure
   - name: restart httpd
     service: name=httpd state=started
     tags:
      - service
save:
 
Execute below commands:
Method1:
ansible-playbook tags.yml --tag  "install,configure"
ansible-playbook tags.yml --skip-tags "install,configure"
Method2:
ansible-playbook tags.yml --start-at-task="creates index.html file"
Method3:
ansible-playbook tags.yml --step  (this step ask permission 2 execute)




include

vi include.yml
---
- hosts: webserver
  remote_user: root
  become: yes
  tasks:
   - include: child.yml


child.yml
---
- name: install maven
  apt:
    name: maven
    state: present
    update_cache: yes
---    
    
2.
---
- hosts: webserver
  remote_user: root
  become: yes
  tasks:
   - include: "{{item}}"
     with_items:
       - install.yml
       - config.yml
       









         
         








       
       
       



















